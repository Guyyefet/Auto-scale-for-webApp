name: "Terraform"

on:
  # Uncomment to enable staging deploy from main
  push:
    branches:
      - main
  release:
    types: [published]
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

  env:
    # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
   
    defaults:
      run:
        working-directory: .
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.ROLE_GITHUB_ACTIONS }}
          role-session-name: GithubActions
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check 
        continue-on-error: true 

      - name: Terraform Init
        id: init
        run: |
         terraform init -backend-config="bucket=terraform-store-state-in-s3-bucket" -backend-config="key=global/s3/terraform.tfstate"
         terraform init --backend-config="bucket=terraform-store-state-in-s3-bucket" --backend-config="key=global/s3/terraform.tfstate"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

# name: "Terraform"

# on:
#   # Uncomment to enable staging deploy from main
#   push:
#     branches:
#       - main
#   release:
#     types: [published]
#   pull_request:
#     branches:
#       - main

# permissions:
#   id-token: write
#   contents: read

# jobs:
#   terraform:
#     name: "Terraform"
#     runs-on: ubuntu-latest
#     env:
#     #   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     #   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       AWS_REGION: ${{ secrets.AWS_REGION }}
#     defaults:
#       run:
#         working-directory: .
    
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1-node16
#         env:
#           aws-region: ${{ secrets.AWS_REGION }}
#           # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           role-to-assume: ${{ secrets.ROLE_GITHUB_ACTIONS }}
#           role-session-name: GithubActions
          
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2
#         with:
#           terraform_version: 1.1.7
#           terraform_wrapper: false

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt -check 
#         continue-on-error: true 

#       - name: Terraform Init
#         id: init
#         run: |
#          terraform init -backend-config="bucket=terraform-store-state-in-s3-bucket" -backend-config="key=global/s3/terraform.tfstate"
#          terraform init --backend-config="bucket=terraform-store-state-in-s3-bucket" --backend-config="key=global/s3/terraform.tfstate"

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate -no-color

#       - name: Terraform Plan
#         id: plan
#         run: terraform plan -no-color
#         if: github.event_name == 'pull_request'
#         continue-on-error: true
